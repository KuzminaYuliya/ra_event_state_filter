{"version":3,"sources":["ProjectList.js","Toolbar.js","Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["ProjectList","props","projects","className","map","o","src","img","alt","uuidv4","Toolbar","filters","selected","onClick","filter","onSelectFilter","Portfolio","setState","state","this","category","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAaeA,MATf,SAAqBC,GAAQ,IACnBC,EAAaD,EAAbC,SACR,OACE,qBAAKC,UAAU,eAAf,SACGD,EAASE,KAAI,SAACC,GAAD,OAAO,qBAAKF,UAAU,OAAOG,IAAKD,EAAEE,IAAKC,IAAI,IAAQC,qBCW1DC,MAhBf,SAAiBT,GAAQ,IACfU,EAAsBV,EAAtBU,QAASC,EAAaX,EAAbW,SAIjB,OACE,qBAAKT,UAAU,UAAf,SAEIQ,EAAQP,KAAI,SAACC,GAAD,OACV,qBAAKF,UAAW,UAAaE,IAAMO,EAAY,YAAc,IAAaC,QAAS,kBAN1EC,EAMwFT,EAN7EJ,EAAMc,eAAeD,GAAjC,IAACA,GAMT,SAAsGT,GAA/BA,SCwBlEW,EA/Bf,kDACE,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAeRc,eAAiB,SAACD,GAChB,EAAKG,SAAS,CAAEL,SAAUE,KAf1B,EAAKH,QAAUV,EAAMU,QACrB,EAAKT,SAAWD,EAAMC,SACtB,EAAKgB,MAAQ,CACXN,SAAU,OALK,EADrB,0CAqBE,WAAU,IAAD,OACP,OACE,sBAAKT,UAAU,YAAf,UACE,cAAC,EAAD,CAASQ,QAASQ,KAAKR,QAASC,SAAUO,KAAKD,MAAMN,SAAUG,eAAgBI,KAAKJ,iBACpF,cAAC,EAAD,CAAab,SAAkC,QAAxBiB,KAAKD,MAAMN,SAAqBO,KAAKjB,SAAWiB,KAAKjB,SAASY,QAAO,SAACT,GAAD,OAAOA,EAAEe,WAAa,EAAKF,MAAMN,qBAzBrI,GAA+BS,aCDzBV,EAAU,CAAC,MAAO,WAAY,UAAW,kBAEzCT,EAAW,CAAC,CAChBK,IAAK,wGACLa,SAAU,kBACT,CACDb,IAAK,wGACLa,SAAU,YACT,CACDb,IAAK,6GACLa,SAAU,YACT,CACDb,IAAK,gHACLa,SAAU,YACT,CACDb,IAAK,iHACLa,SAAU,kBACT,CACDb,IAAK,iHACLa,SAAU,YACT,CACDb,IAAK,wGACLa,SAAU,YACT,CACDb,IAAK,iHACLa,SAAU,kBACT,CACDb,IAAK,mHACLa,SAAU,YACT,CACDb,IAAK,mHACLa,SAAU,WACT,CACDb,IAAK,sHACLa,SAAU,YACT,CACDb,IAAK,wGACLa,SAAU,kBACT,CACDb,IAAK,qHACLa,SAAU,YACT,CACDb,IAAK,6GACLa,SAAU,YACT,CACDb,IAAK,iHACLa,SAAU,kBACT,CACDb,IAAK,uHACLa,SAAU,YACT,CACDb,IAAK,mHACLa,SAAU,YAUGE,MANf,WACE,OACE,cAAC,EAAD,CAAWX,QAASA,EAAST,SAAYA,KClDzBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9537293.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction ProjectList(props) {\r\n  const { projects } = props;\r\n  return (\r\n    <div className='project-list'>\r\n      {projects.map((o) => <img className='card' src={o.img} alt='' key={uuidv4()}/>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectList;\r\n\r\nProjectList.propTypes = {\r\n  projects: PropTypes.array.isRequired,\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Toolbar(props) {\r\n  const { filters, selected } = props;\r\n\r\n  const onClick = (filter) => props.onSelectFilter(filter);\r\n\r\n  return (\r\n    <div className='toolbar'>\r\n      {\r\n        filters.map((o) =>\r\n          <div className={'filter' + ((o === selected) ? ' selected' : '')} key={o} onClick={() => onClick(o)}>{o}</div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Toolbar;\r\n\r\nToolbar.propTypes = {\r\n  filters: PropTypes.array.isRequired,\r\n  selected: PropTypes.string.isRequired,\r\n  onSelectFilter: PropTypes.func.isRequired,\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProjectList from './ProjectList';\r\nimport Toolbar from './Toolbar';\r\n\r\nexport class Portfolio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.filters = props.filters;\r\n    this.projects = props.projects;\r\n    this.state = {\r\n      selected: \"All\",\r\n    };\r\n  }\r\n\r\n  static propTypes = {\r\n    filters: PropTypes.array.isRequired,\r\n    projects: PropTypes.array.isRequired,\r\n  }\r\n\r\n\r\n\r\n  onSelectFilter = (filter) => {\r\n    this.setState({ selected: filter });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='portfolio'>\r\n        <Toolbar filters={this.filters} selected={this.state.selected} onSelectFilter={this.onSelectFilter}/>\r\n        <ProjectList projects={this.state.selected === 'All' ? this.projects : this.projects.filter((o) => o.category === this.state.selected)}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Portfolio\r\n","import React from 'react';\r\nimport './css/main.css';\r\nimport Portfolio from './Portfolio';\r\n\r\nconst filters = [\"All\", \"Websites\", \"Flayers\", \"Business Cards\"];\r\n\r\nconst projects = [{\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/mon.jpg\",\r\n  category: \"Business Cards\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/200.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/emi_haze.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/codystretch.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_003.jpg\",\r\n  category: \"Business Cards\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290.png\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/200.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/transmission.jpg\",\r\n  category: \"Business Cards\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_1.png\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_2.png\",\r\n  category: \"Flayers\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/the_ninetys_brand.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/dia.jpg\",\r\n  category: \"Business Cards\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_350x197.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/emi_haze.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/transmission.jpg\",\r\n  category: \"Business Cards\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/Triangle_350x197_1.jpg\",\r\n  category: \"Websites\"\r\n}, {\r\n  img: \"https://raw.githubusercontent.com/netology-code/ra16-homeworks/master/events-state/filter/img/place200x290_3.png\",\r\n  category: \"Flayers\"\r\n}];\r\n\r\n// Внутри компонента App\r\nfunction App() {\r\n  return (\r\n    <Portfolio filters={filters} projects = {projects}/>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}